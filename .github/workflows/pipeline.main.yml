name: spellbook_ug_frontend main

run-name: ${{ github.event.head_commit.message }}
on: 
  push: 
    branches: 
      - dev

jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository 
#         uses: actions/checkout@v4

#       - run: npm ci
      
#       - run: npm run build
#         env: 
#           CI: ""

  push_to_DockerHub:
    runs-on: ubuntu-latest
    # needs: build

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v5.3.0
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/spellbook_ug_frontend:latest
          build-args: |
            PORT=443
            NODE_VERSION=${{vars.NODE_VERSION}}
            REACT_APP_CRYPTO_KEY=${{secrets.REACT_APP_CRYPTO_KEY}}
            REACT_APP_CRYPTO_COUNTER=${{secrets.REACT_APP_CRYPTO_COUNTER}}
            REACT_APP_CRYPTO_ALG=${{secrets.REACT_APP_CRYPTO_ALG}}
            REACT_APP_CRYPTO_LENGTH=${{secrets.REACT_APP_CRYPTO_LENGTH}}
            HTTPS=true
            SSL_KEY_PASSWORD=${{secrets.SSL_KEY_PASSWORD}}
            SSL_CRT_FILE_NAME=${{vars.SSL_CRT_FILE_NAME}}
            SSL_KEY_FILE_NAME=${{vars.SSL_KEY_FILE_NAME}}
            SSL_DIR=src/assets/ssl/prod

#   deploy_to_server:
#     runs-on: ubuntu-latest
#     needs: push_to_DockerHub

#     steps:
#       - uses: appleboy/ssh-action@v1.0.3
#         with: 
#           host: word-light.de
#           username: ${{ secrets.SSH_USER_NAME }}
#           password: ${{ secrets.SSH_PASSWORD }}
#           debug: true
#           # pull new image, remove left overs from old image, start microservice
#           script: |
#             docker-compose pull frontend
#             yes | docker rm $(docker container ls --all --filter=ancestor=$(docker images -f "dangling=true" -q) --format "{{.ID}}") --force
#             yes | docker image rm $(docker images -f "dangling=true" -q)
#             docker-compose up -d